@import url("https://fonts.googleapis.com/css2?family=Lato:wght@300&display=swap");

/* defining CSS variables */
:root {
  --primary-color: #047aed;
  --secondary-color: #1c3fa8;
  --dark-color: #002240;
  --light-color: #f4f4f4;
}


/* Resetting default box-sizing,padding,margin. By doing this we don't need to worry about the presets everytime */
/* In first line we are setting box-sizing to border-box, by doing so we get rid of pre sets */
/* default-padding is set to zero */
/* default-margin is set to zero */
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

/* configuring global font settings */
/* setting deafult font-family to imported google-font Lato, sans-serif */
/* setting default font color to cutom hexadecimal black color */
/* setting default line height to 1.6 to make text look distictive */
body {
  font-family: "Lato", sans-serif;
  color: #333;
  line-height: 1.6;
}

/* removing bullet points in ul */
ul {
  list-style-type: none;
}

/* getting rid of text decorations like underlines for anchor tags*/
/* chnging the anchor tag text Color */
a {
  text-decoration: none;
  color: #333;
}

/* configuring or adiing custom styling to H1 and H2 elements */
/* setting the font weight to 300 will make it look little bit a elegant for our lato font */
/* adding line height of 1.2 would make our font distinctive */
/* adding margin of 10px to top and bottom would avoid chances of our text looking squashed */
h1,
h2 {
  font-weight: 300;
  line-height: 1.2;
  margin: 10px 0;
}

/* adiing the margin to top and bottom of paragraph so that they dont look squashed, we can easily distinguish between two paragraphs */
p {
  margin: 10px 0;
}

/* adding the width of 100% would keep the images within the container,It is to avoid the image overflow problem */
img {
  width: 100%;
}

/* Navbar Styling */

/* background color of Navbar is set to custom hexadecimal blue */
/* color of the text is set to white in order to give some contrast */
/* IN Third Line we are going to set the navbar height,we can change as for the looks */
.navbar {
  background-color: var(--primary-color);
  color: #fff;
  height: 70px;
}

/* .navbar ul selector applies the specified styles only to the ul element which is in the navbar class */
/* display:flex; makes ul flex-box and elements inside it flex-items.It also positions items inside the ul-element horizontally(i.e By default flex-direction is row )  */
.navbar ul {
  display: flex;
}

/* .navbar a selector applies specified styles to the links(anchor tag) inside the navbar class */
/* first we set the color of link to custom hexadecimal white i.e #fff */
/* to break the links up a bit, we add a padding of 10px so that they look nice */
/* we break them even further apart by adding margin of 5px to both left and right i.e margin:0 5px; */
.navbar a {
  color: #fff;
  padding: 10px;
  margin: 0 5px;
}

/* .nav a:hover(:hover is a psuedo-class) is used to add a styling or special-effects to the links(anchor tag a) in the navbar-class whenver we hover over them */
/* secod line of code adds a a solid white border of 2px to the bottom of the Links in the the navbar-class whenever we hover over them */
.navbar a:hover {
  border-bottom: 2px #fff solid;
}

/* .navbar .flex (space between .navbar and .flex is very important.if the space is not given, styling won't owrk properly) condition specifies that if the flex is in the navbar applies the styles specified in this section*/
/* justify-content: space-between; takes all the available space and puts it between the flex items(elements).Here space-between puts the avialable space between the h1-element(first flex-item) and nav-element(second flex-item)so they are placed at the right and left end of the container respectively. */
.navbar .flex {
  justify-content: space-between;
}

/* Showcse/Hero section styling */

.showcase {
  height: 400px;
  background-color: var(--primary-color);
  color: #fff;
  position: relative;
}

.showcase h1 {
  font-size: 40px;
}

.showcase p {
  margin: 20px 0;
}

.showcase .grid {
  overflow: visible;
  grid-template-columns: 55% 45%;
  gap: 30px;
}

.showcase-form {
  position: relative;
  top: 60px;
  height: 350px;
  min-width: 300px;
  max-width: 400px;
  padding: 40px;
  z-index: 100;
}

.showcase-form .form-control {
  margin: 30px 0;
}

.showcase-form input[type="text"],
.showcase-form input[type="email"] {
  border: 0;
  border-bottom: 1px solid #b4becb;
  width: 100%;
  padding: 3px;
  font-size: 16px;
}

.showcase-form input:focus {
  outline: none;
}

.showcase::before,
.showcase::after {
  content: "";
  position: absolute;
  height: 100px;
  bottom: -70px;
  right: 0;
  left: 0;
  background-color: #fff;
  transform: skewY(-3deg);
  -webkit-transform: skewY(-3deg);
  -moz-transform: skewY(-3deg);
  -ms-transform: skewY(-3deg);
}

/* Stats */

.stats {
  padding-top: 100px;
}

.stats-heading {
  max-width: 500px;
  margin: auto;
}

.stats .grid h3 {
  font-size: 35px;
}

.stats .grid p {
  font-size: 20px;
  font-weight: bold;
}


/* CLI styling */

.cli .grid {
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);
}

.cli .grid > *:first-child {
    grid-column: 1 / span 2;
    grid-row: 1 / span 2;
}


/* Cloud Styling */

.cloud .grid{
    grid-template-columns: 4fr 3fr;
}

/* languages styling */

.languages .flex {
    flex-wrap: wrap;
}

.languages .card {
    text-align: center;
    margin:18px 10px 40px;
    transition: transform 0.2s ease-in ;
}

.languages .card{
    font-size: 20px;
    margin-bottom: 10px;
}

.languages .card:hover{
    transform: translateY(-15px);
}

/* footer styling */
.footer .social a {
    margin: 0 10px;
}