/* Utilities styling */

/* setting the maximum width(Horizontally) of our container(logo and the content) to 1100px, so that if we go beyond the specified width,the container(logo and contents) won't strech beyond that 1100px mark. */
/* positioning the container(i.e our logo and contents) to the middle(horizontally) using margin auto on both left and right */
/* getting rid-off top space which comes because of margin:10px 0;(margin-top:10p;margin-bottom:10px) set in H1 section. It's done by adding an overflow property to it, and setting it to zero   */
/* adding little bit of padding(i.e 40px) to right and left, so that our content and logo wont sit attached to left or right border even when the screen width is lesser than specified width(i.e 1100px)  */
.container {
  max-width: 1100px;
  margin: 0 auto;
  overflow: auto;
  padding: 0 40px;
}

.card {
  background-color: #fff;
  color: #333;
  border-radius: 10px;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
  padding: 20px;
  margin: 10px;
}

.btn {
  display: inline-block;
  padding: 10px 30px;
  cursor: pointer;
  background-color: var(--primary-color);
  color: #fff;
  border: none;
  border-radius: 5px;
}

.btn-outline {
  background-color: transparent;
  border: 1px #fff solid;
}

.btn:hover {
  transform: scale(0.98);
}

/* backgrounds and colored button's */

.bg-primary,
.btn-primary {
  background-color: var(--primary-color);
  color: #fff;
}
.bg-secondary,
.btn-secondary {
  background-color: var(--secondary-color);
  color: #fff;
}
.bg-dark,
.btn-dark {
  background-color: var(--dark-color);
  color: #fff;
}
.bg-light,
.btn-light {
  background-color: var(--light-color);
  color: #333;
}

.bg-primary a,
.btn-primary a,
.bg-secondary a,
.btn-secondary a,
.bg-dark a,
.btn-dark a,
.bg-light a,
.btn-light a {
    color:#fff;
}

/* text sizes */

.lead {
    font-size: 20px;
}

.sm {
    font-size: 1rem;
}
.md {
    font-size: 2rem;
}
.lg {
    font-size: 3rem;
}
.xl {
    font-size: 4rem;
}

.text-center {
  text-align: center;
}

/* here we position our anchcor text/link(i.e nav content) horizontally by using flebox and adding utility class flex to our container so that our positioning won't override previous container styling */
/* display:flex(default flex-direction is row, flex-direction:row;) truns our container into a flex column and elements inside the container with utility class flex to a flex-items, i.e h1-element(first flex item) and nav-element(the second flex item) kept side by side  */
/* justify-content:center; positions the elements to center along the flex-direction(i.e horizontally/paralally if flex-direction:row; , vertically/perpendicularly if flex-direction:column */
/* align-items:center; positions the elements to center across the flex-direction(i.e vertically/perpendicularly if flex-direction:row; , horizontally/paralally if flex-direction:column */
/* setting the height of the container to 100% of whatever the parent container height is */
.flex {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
}

.grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 20px;
  justify-content: center;
  align-items: center;
  height: 100%;
}

.grid-3 {
  grid-template-columns: repeat(3, 1fr);
}

/* Margin styling */

.my-1 {
  margin: 1rem 0;
}

.my-2 {
  margin: 1.5rem 0;
}

.my-3 {
  margin: 1.5rem 0;
}

.my-4 {
  margin: 3rem 0;
}

.my-5 {
  margin: 4rem 0;
}

.m-1 {
  margin: 1rem;
}

.m-2 {
  margin: 1.5rem;
}

.m-3 {
  margin: 1.5rem;
}

.m-4 {
  margin: 3rem;
}

.m-5 {
  margin: 4rem;
}

/* padding styling */

.py-1 {
  padding: 1rem 0;
}

.py-2 {
  padding: 1.5rem 0;
}

.py-3 {
  padding: 1.5rem 0;
}

.py-4 {
  padding: 3rem 0;
}

.py-5 {
  padding: 4rem 0;
}

.p-1 {
  padding: 1rem;
}

.p-2 {
  padding: 1.5rem;
}

.p-3 {
  padding: 1.5rem;
}

.p-4 {
  padding: 3rem;
}

.p-5 {
  padding: 4rem;
}
